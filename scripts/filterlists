#!/usr/bin/env python3

import json
import os
import sys
from tempfile import NamedTemporaryFile
from urllib.parse import quote_plus, unquote
from urllib.request import HTTPError, Request, urlopen

def url_to_path(syntaxId, url):
    return os.path.join('data/filterlists', str(syntaxId), quote_plus(url))

def path_to_url(path):
    return unquote(os.path.basename(path))

def list_lists(filename):
    with open(filename) as infile:
        ll = json.load(infile)
        for k in ll:
            print(url_to_path(k.get('syntaxId', 0), k['viewUrl']))

def spew_file(filename, content):
    try:
        os.makedirs(os.path.split(filename)[0])
    except FileExistsError:
        pass
    with NamedTemporaryFile(dir=os.path.dirname(filename), mode='w+',
                            delete=False, encoding='utf-8') as scratch:
        scratch.write(content)
    os.replace(scratch.name, filename)

def fetch_url(url, pathname):
    req = Request(url)
    try:
        res = urlopen(req, timeout=10)
        encodings = (res.headers.get_content_charset(), 'utf-8', 'latin_1')
        stuff = res.read()
        for encoding in encodings:
            try:
                stuff = stuff.decode(encoding)
                break
            except:
                pass
        else:       
            print("Failed to decode %s" % url)
        spew_file(pathname, stuff)
    except Exception as e:
        print("Failed to get %s: %s" % (url, e))

if 'list' == sys.argv[1]:
    list_lists(sys.argv[2])
    sys.exit(0)

if 'fetch' == sys.argv[1]:
    pathname = sys.argv[2]
    url = path_to_url(pathname)
    fetch_url(url, pathname)

# vim: autoindent textwidth=100 tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=python

